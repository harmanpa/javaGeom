/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package math.geom2d.svg;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JFrame;
import javax.swing.JPanel;
import math.geom2d.circulinear.CirculinearCurve2D;
import math.geom2d.math.Rings2D;

/**
 *
 * @author peter
 */
public class CheckOverlappingSubtraction extends JPanel {
    
    private static final String outerSVG = "M 1353.55901718 84.70900357 L 1353.55901718 47.87899926 L 1353.55901718 41.02100059 L 1353.55901718 33.6708501 A 1.01600005 1.01600005 0 0 0 1352.76269913 32.6788798 A 3.6830001 3.6830001 0 0 1 1353.55901718 25.39999969 L 1390.12992382 25.39999969 A 6.34999992 6.34999992 0 0 0 1396.47483826 18.79619993 L 1395.76196671 0.97539002 A 1.01600005 1.01600005 0 0 0 1394.7468996 0 L 1220.8930254 0 A 1.01600005 1.01600005 0 0 0 1219.88022327 0.93497999 L 1218.93906593 12.69999985 A 3.6830001 3.6830001 0 0 1 1211.66014671 13.49631976 A 1.01600005 1.01600005 0 0 0 1210.66820621 12.69999985 L 795.40991783 12.69999985 A 1.01600005 1.01600005 0 0 0 794.41791773 13.49631976 A 3.6830001 3.6830001 0 0 1 787.13905811 12.69999985 L 786.19784117 0.93497999 A 1.01600005 1.01600005 0 0 0 785.18509865 0 L 611.29295826 0 A 1.01600005 1.01600005 0 0 0 610.28021574 0.93497999 L 609.33899879 12.69999985 A 3.6830001 3.6830001 0 0 1 602.06013918 13.49631976 A 1.01600005 1.01600005 0 0 0 601.06813908 12.69999985 L 185.80986559 12.69999985 A 1.01600005 1.01600005 0 0 0 184.81791019 13.49631976 A 3.6830001 3.6830001 0 0 1 177.53902078 12.69999985 L 176.59781873 0.93497999 A 1.01600005 1.01600005 0 0 0 175.58506131 0 L 1.73120003 0 A 1.01600005 1.01600005 0 0 0 0.71600999 0.97539002 L 0.00318 18.79619993 A 6.34999992 6.34999992 0 0 0 6.34810003 25.39999969 L 42.91902855 25.39999969 A 3.6830001 3.6830001 0 0 1 43.71535033 32.6788798 A 1.01600005 1.01600005 0 0 0 42.91902855 33.6708501 L 42.91902855 41.02100059 L 42.91902855 47.87899926 L 42.91902855 84.70900357 A 1.01600005 1.01600005 0 0 0 43.93501952 85.72500199 L 61.54818088 85.72500199 A 1.01600005 1.01600005 0 0 0 62.26659939 85.42741835 L 75.34915209 72.34486938 A 6.34999992 6.34999992 0 0 1 79.83928174 70.48500329 L 99.18002039 70.48500329 L 119.11903322 70.48500329 L 1277.35900879 70.48500329 L 1297.29807377 70.48500329 L 1316.63870811 70.48500329 A 6.34999992 6.34999992 0 0 1 1321.12884521 72.34486938 L 1334.2114687 85.42741835 A 1.01600005 1.01600005 0 0 0 1334.92982388 85.72500199 L 1352.54299641 85.72500199 A 1.01600005 1.01600005 0 0 0 1353.55901718 84.70900357 Z";
    private static List<String> innerSVGs = Arrays.asList("M 1353.54102478 84.89937816 A 1.01599998 1.01599998 0 0 1 1352.54302368 85.725 L 1334.92985458 85.725 A 1.01599998 1.01599998 0 0 1 1334.21148758 85.42742248 L 1321.1288559 72.34486952 A 6.35 6.35 0 0 0 1316.63872299 70.48500242 L 1297.29804306 70.48500242 L 1297.29804306 47.87899976 L 1353.55904694 47.87899976 L 1353.55904694 84.70900097 A 1.01599998 1.01599998 0 0 1 1353.54102478 84.89937816 Z",
            "M 62.26660266 85.42742248 A 1.01599998 1.01599998 0 0 1 61.54818115 85.725 L 43.93502417 85.725 A 1.01599998 1.01599998 0 0 1 42.91902514 84.70900097 L 42.91902514 47.87899976 L 99.18002295 47.87899976 L 99.18002295 70.48500242 L 79.83928246 70.48500242 A 6.35 6.35 0 0 0 75.34914956 72.34486952 L 62.26660266 85.42742248 Z",
            "M 792.40168114 16.02704074 A 3.68299989 3.68299989 0 0 0 794.41788559 13.49632373 A 1.01599998 1.01599998 0 0 1 795.4098793 12.7 L 1210.66815643 12.7 A 1.01599998 1.01599998 0 0 1 1211.66015015 13.49632373 A 3.68299989 3.68299989 0 0 0 1218.93906631 12.7 L 1219.88019104 0.93497881 A 1.01599998 1.01599998 0 0 1 1220.89301682 0 L 1394.74684296 0 A 1.01599998 1.01599998 0 0 1 1395.76199417 0.9753925 L 1396.47483826 18.79620311 A 6.35 6.35 0 0 1 1390.1299736 25.4 L 1353.55904694 25.4 A 3.68299989 3.68299989 0 0 0 1352.76268082 32.67887983 A 1.01599998 1.01599998 0 0 1 1353.55904694 33.6708463 L 1353.55904694 41.02100024 L 1297.29804306 41.02100024 L 1297.29804306 20.06600055 A 3.68299989 3.68299989 0 0 0 1297.29804306 12.70000038 L 1289.67806244 12.7 A 3.68299989 3.68299989 0 0 0 1289.67806244 20.06600017 L 1289.67806244 25.4 L 1277.35904694 25.4 A 3.68299989 3.68299989 0 1 0 1277.35904694 32.76599903 L 1277.35904694 41.02100024 L 1251.95904694 41.02100024 A 3.42900014 3.42900014 0 1 0 1251.95904694 47.87899976 L 1277.35904694 47.87899976 L 1277.35904694 70.48500242 L 119.11902514 70.48500242 L 119.11902514 47.87899976 L 144.51902514 47.87899976 A 3.42900014 3.42900014 0 1 0 144.51902514 41.02100024 L 119.11902514 41.02100024 L 119.11902514 32.76599903 A 3.68299989 3.68299989 0 1 0 119.11902514 25.4 L 106.80002174 25.4 L 106.80002174 20.06600055 A 3.68299989 3.68299989 0 0 0 106.80002174 12.70000038 L 99.18002295 12.7 A 3.68299989 3.68299989 0 0 0 99.18002295 20.06600017 L 99.18002295 41.02100024 L 42.91902514 41.02100024 L 42.91902514 33.6708463 A 1.01599998 1.01599998 0 0 1 43.71534886 32.67887983 A 3.68299989 3.68299989 0 0 0 42.91902514 25.4 L 6.34810188 25.4 A 6.35 6.35 0 0 1 0.00317562 18.79620311 L 0.71600802 0.9753925 A 1.01599998 1.01599998 0 0 1 1.73119619 0 L 175.58505526 0 A 1.01599998 1.01599998 0 0 1 176.59782047 0.93497881 L 177.53901787 12.7 A 3.68299989 3.68299989 0 0 0 184.81790981 13.49632373 A 1.01599998 1.01599998 0 0 1 185.80986719 12.7 L 601.06815643 12.7 A 1.01599998 1.01599998 0 0 1 602.06015015 13.49632373 A 3.68299989 3.68299989 0 0 0 609.33901787 12.7 L 610.28023949 0.93497881 A 1.01599998 1.01599998 0 0 1 611.29296837 0 L 785.18506737 0 A 1.01599998 1.01599998 0 0 1 786.1978447 0.93497881 L 787.13901787 12.7 A 3.68299989 3.68299989 0 0 0 792.40168114 16.02704074 Z");
    
    public CheckOverlappingSubtraction() throws IOException {
        
    }
    
    public void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setColor(Color.black);
        CirculinearCurve2D outer = SVGPaths.parse(outerSVG);
        outer.draw(g2);
        Rings2D.difference(outer, innerSVGs.stream().map(svg->SVGPaths.parse(svg)).collect(Collectors.toList()), 0.1).forEach(d -> {
                g2.translate(0, 100);
                d.draw(g2);
            });
//        innerSVGs.forEach(svg -> {
//            g2.translate(0, 100);
//            CirculinearCurve2D curve = SVGPaths.parse(svg);
//            Rings2D.difference(outer, curve, 0.1).forEach(d -> {
//                g2.translate(0, 100);
//                d.draw(g2);
//            });
//            g2.setColor(Color.black);
//            curve.draw(g2);
//            g2.setColor(Color.red);
//            List<Point2D> points = Rings2D.iterativeIntersections(outer, curve, 0.1);
//            points.forEach(i -> g2.drawOval(i.getAsInt().x - 2, i.getAsInt().y - 2, 4, 4));
//            Collections.sort(points, (p1, p2) -> (int) Math.signum(outer.project(p1) - outer.project(p2)));
//            Rings2D.loops(Rings2D.ensureClockwise(outer), Rings2D.ensureCounterClockwise(curve), points).forEach(loop -> {
//                g2.translate(0, 100);
//                loop.forEach(ioc -> {
//                    if (ioc.getIntersection() == null) {
//                        ioc.getCurves().forEach(c -> c.draw(g2));
//                    } else {
//                        g2.drawOval(ioc.getIntersection().getAsInt().x - 2, ioc.getIntersection().getAsInt().y - 2, 4, 4);
//                    }
//                });
//            });
//        });
    }
    
    public final static void main(String[] args) throws IOException {
        JPanel panel = new CheckOverlappingSubtraction();
        panel.setPreferredSize(new Dimension(1200, 1200));
        JFrame frame = new JFrame("Parsed SVG");
        frame.setContentPane(panel);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    
}
